type token =
  | LAMBDA
  | TRUE
  | FALSE
  | IF
  | THEN
  | ELSE
  | SUCC
  | PRED
  | ISZERO
  | LET
  | LETREC
  | IN
  | CONCAT
  | FIRST
  | SUB
  | BOOL
  | NAT
  | TUPLE
  | STRING
  | CHAR
  | FIX
  | LPAREN
  | RPAREN
  | LCURLY
  | RCURLY
  | COMMA
  | DOT
  | EQ
  | COLON
  | ARROW
  | EOF
  | INTV of (int)
  | IDV of (string)
  | STRINGV of (string)
  | CHARV of (char)

open Parsing;;
let _ = parse_error;;
# 3 "parser.mly"
  open Lambda;;
# 43 "parser.ml"
let yytransl_const = [|
  257 (* LAMBDA *);
  258 (* TRUE *);
  259 (* FALSE *);
  260 (* IF *);
  261 (* THEN *);
  262 (* ELSE *);
  263 (* SUCC *);
  264 (* PRED *);
  265 (* ISZERO *);
  266 (* LET *);
  267 (* LETREC *);
  268 (* IN *);
  269 (* CONCAT *);
  270 (* FIRST *);
  271 (* SUB *);
  272 (* BOOL *);
  273 (* NAT *);
  274 (* TUPLE *);
  275 (* STRING *);
  276 (* CHAR *);
  277 (* FIX *);
  278 (* LPAREN *);
  279 (* RPAREN *);
  280 (* LCURLY *);
  281 (* RCURLY *);
  282 (* COMMA *);
  283 (* DOT *);
  284 (* EQ *);
  285 (* COLON *);
  286 (* ARROW *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  287 (* INTV *);
  288 (* IDV *);
  289 (* STRINGV *);
  290 (* CHARV *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\002\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\005\000\005\000\005\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\007\000\007\000\004\000\004\000\008\000\
\008\000\008\000\008\000\008\000\008\000\009\000\009\000\000\000"

let yylen = "\002\000\
\004\000\002\000\001\000\006\000\006\000\006\000\008\000\001\000\
\002\000\002\000\002\000\003\000\002\000\002\000\002\000\002\000\
\004\000\004\000\001\000\003\000\001\000\001\000\001\000\001\000\
\001\000\001\000\003\000\001\000\003\000\001\000\003\000\003\000\
\001\000\001\000\001\000\001\000\004\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\021\000\022\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\024\000\000\000\025\000\026\000\040\000\000\000\000\000\
\000\000\019\000\000\000\023\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\020\000\000\000\027\000\000\000\000\000\033\000\
\034\000\000\000\035\000\036\000\000\000\000\000\000\000\000\000\
\000\000\000\000\029\000\001\000\018\000\017\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\032\000\
\005\000\031\000\004\000\006\000\000\000\000\000\037\000\000\000\
\039\000\007\000"

let yydgoto = "\002\000\
\022\000\040\000\024\000\078\000\025\000\026\000\041\000\063\000\
\079\000"

let yysindex = "\002\000\
\021\255\000\000\237\254\000\000\000\000\092\255\058\255\058\255\
\058\255\241\254\242\254\058\255\058\255\058\255\058\255\092\255\
\092\255\000\000\247\254\000\000\000\000\000\000\020\000\058\255\
\250\254\000\000\254\254\000\000\028\255\250\254\250\254\250\254\
\012\255\015\255\035\255\250\254\250\254\250\254\025\255\024\255\
\026\255\092\255\000\000\250\254\029\255\246\254\092\255\092\255\
\246\254\250\254\000\000\092\255\000\000\058\000\227\254\000\000\
\000\000\039\255\000\000\000\000\246\254\038\255\040\255\065\255\
\061\255\049\255\000\000\000\000\000\000\000\000\246\254\055\255\
\092\255\246\254\092\255\092\255\092\255\053\255\056\255\000\000\
\000\000\000\000\000\000\000\000\071\255\246\254\000\000\092\255\
\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\206\000\000\000\000\000\000\000\000\000\229\000\
\001\000\000\000\000\000\000\000\000\000\016\000\049\000\064\000\
\000\000\000\000\000\000\097\000\112\000\145\000\000\000\059\255\
\000\000\000\000\000\000\160\000\000\000\000\000\000\000\000\000\
\000\000\193\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\094\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\060\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\255\255\000\000\221\255\120\000\000\000\034\000\000\000\
\012\000"

let yytablesize = 511
let yytable = "\023\000\
\008\000\069\000\001\000\070\000\029\000\056\000\057\000\058\000\
\059\000\060\000\062\000\061\000\027\000\066\000\039\000\009\000\
\033\000\034\000\042\000\043\000\045\000\003\000\004\000\005\000\
\006\000\072\000\046\000\007\000\008\000\009\000\010\000\011\000\
\047\000\012\000\013\000\014\000\004\000\005\000\082\000\048\000\
\054\000\015\000\016\000\049\000\017\000\064\000\065\000\051\000\
\010\000\052\000\053\000\018\000\019\000\020\000\021\000\055\000\
\016\000\068\000\017\000\004\000\005\000\045\000\071\000\011\000\
\073\000\018\000\028\000\020\000\021\000\074\000\075\000\081\000\
\076\000\083\000\084\000\085\000\077\000\080\000\086\000\016\000\
\087\000\017\000\088\000\028\000\038\000\067\000\090\000\000\000\
\018\000\028\000\020\000\021\000\003\000\004\000\005\000\006\000\
\014\000\089\000\007\000\008\000\009\000\010\000\011\000\000\000\
\012\000\013\000\014\000\000\000\000\000\000\000\000\000\015\000\
\015\000\016\000\000\000\017\000\030\000\000\000\030\000\030\000\
\030\000\030\000\018\000\028\000\020\000\021\000\030\000\031\000\
\032\000\000\000\000\000\035\000\036\000\037\000\038\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\044\000\
\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\050\000\000\000\000\000\000\000\000\000\016\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\023\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\008\000\008\000\000\000\008\000\008\000\000\000\
\000\000\000\000\000\000\000\000\008\000\000\000\000\000\000\000\
\000\000\009\000\009\000\000\000\009\000\009\000\008\000\008\000\
\008\000\008\000\008\000\009\000\000\000\000\000\000\000\008\000\
\008\000\008\000\008\000\000\000\000\000\009\000\009\000\009\000\
\009\000\009\000\000\000\000\000\000\000\000\000\009\000\009\000\
\009\000\009\000\010\000\010\000\000\000\010\000\010\000\000\000\
\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\
\000\000\011\000\011\000\000\000\011\000\011\000\010\000\010\000\
\010\000\010\000\010\000\011\000\000\000\000\000\000\000\010\000\
\010\000\010\000\010\000\000\000\000\000\011\000\011\000\011\000\
\011\000\011\000\000\000\000\000\000\000\000\000\011\000\011\000\
\011\000\011\000\014\000\014\000\000\000\014\000\014\000\000\000\
\000\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\
\000\000\015\000\015\000\000\000\015\000\015\000\014\000\014\000\
\014\000\014\000\014\000\015\000\000\000\000\000\000\000\014\000\
\014\000\014\000\014\000\000\000\000\000\015\000\015\000\015\000\
\015\000\015\000\000\000\000\000\000\000\000\000\015\000\015\000\
\015\000\015\000\013\000\013\000\000\000\013\000\013\000\000\000\
\000\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\
\000\000\016\000\016\000\000\000\016\000\016\000\013\000\013\000\
\013\000\013\000\013\000\016\000\000\000\000\000\000\000\013\000\
\013\000\013\000\013\000\000\000\000\000\016\000\016\000\016\000\
\016\000\016\000\000\000\000\000\000\000\000\000\016\000\016\000\
\016\000\016\000\012\000\012\000\000\000\012\000\012\000\000\000\
\000\000\000\000\000\000\000\000\012\000\000\000\000\000\023\000\
\023\000\000\000\000\000\000\000\000\000\000\000\012\000\012\000\
\012\000\012\000\012\000\000\000\000\000\000\000\000\000\012\000\
\012\000\012\000\012\000\023\000\000\000\023\000\000\000\000\000\
\023\000\003\000\003\000\000\000\023\000\023\000\023\000\023\000\
\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\003\000\000\000\003\000\003\000"

let yycheck = "\001\000\
\000\000\031\001\001\000\033\001\006\000\016\001\017\001\018\001\
\019\001\020\001\046\000\022\001\032\001\049\000\016\000\000\000\
\032\001\032\001\028\001\000\000\027\001\001\001\002\001\003\001\
\004\001\061\000\029\001\007\001\008\001\009\001\010\001\011\001\
\005\001\013\001\014\001\015\001\002\001\003\001\074\000\028\001\
\042\000\021\001\022\001\029\001\024\001\047\000\048\000\023\001\
\000\000\026\001\025\001\031\001\032\001\033\001\034\001\027\001\
\022\001\000\000\024\001\002\001\003\001\027\001\024\001\000\000\
\027\001\031\001\032\001\033\001\034\001\030\001\006\001\073\000\
\012\001\075\000\076\000\077\000\028\001\023\001\026\001\022\001\
\025\001\024\001\012\001\025\001\025\001\052\000\088\000\255\255\
\031\001\032\001\033\001\034\001\001\001\002\001\003\001\004\001\
\000\000\086\000\007\001\008\001\009\001\010\001\011\001\255\255\
\013\001\014\001\015\001\255\255\255\255\255\255\255\255\000\000\
\021\001\022\001\255\255\024\001\023\001\255\255\025\001\026\001\
\027\001\028\001\031\001\032\001\033\001\034\001\007\000\008\000\
\009\000\255\255\255\255\012\000\013\000\014\000\015\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\024\000\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\035\000\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\255\255\005\001\006\001\255\255\
\255\255\255\255\255\255\255\255\012\001\255\255\255\255\255\255\
\255\255\002\001\003\001\255\255\005\001\006\001\022\001\023\001\
\024\001\025\001\026\001\012\001\255\255\255\255\255\255\031\001\
\032\001\033\001\034\001\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\255\255\255\255\255\255\255\255\031\001\032\001\
\033\001\034\001\002\001\003\001\255\255\005\001\006\001\255\255\
\255\255\255\255\255\255\255\255\012\001\255\255\255\255\255\255\
\255\255\002\001\003\001\255\255\005\001\006\001\022\001\023\001\
\024\001\025\001\026\001\012\001\255\255\255\255\255\255\031\001\
\032\001\033\001\034\001\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\255\255\255\255\255\255\255\255\031\001\032\001\
\033\001\034\001\002\001\003\001\255\255\005\001\006\001\255\255\
\255\255\255\255\255\255\255\255\012\001\255\255\255\255\255\255\
\255\255\002\001\003\001\255\255\005\001\006\001\022\001\023\001\
\024\001\025\001\026\001\012\001\255\255\255\255\255\255\031\001\
\032\001\033\001\034\001\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\255\255\255\255\255\255\255\255\031\001\032\001\
\033\001\034\001\002\001\003\001\255\255\005\001\006\001\255\255\
\255\255\255\255\255\255\255\255\012\001\255\255\255\255\255\255\
\255\255\002\001\003\001\255\255\005\001\006\001\022\001\023\001\
\024\001\025\001\026\001\012\001\255\255\255\255\255\255\031\001\
\032\001\033\001\034\001\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\255\255\255\255\255\255\255\255\031\001\032\001\
\033\001\034\001\002\001\003\001\255\255\005\001\006\001\255\255\
\255\255\255\255\255\255\255\255\012\001\255\255\255\255\002\001\
\003\001\255\255\255\255\255\255\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\255\255\255\255\255\255\255\255\031\001\
\032\001\033\001\034\001\022\001\255\255\024\001\255\255\255\255\
\027\001\005\001\006\001\255\255\031\001\032\001\033\001\034\001\
\012\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\023\001\255\255\025\001\026\001"

let yynames_const = "\
  LAMBDA\000\
  TRUE\000\
  FALSE\000\
  IF\000\
  THEN\000\
  ELSE\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  LET\000\
  LETREC\000\
  IN\000\
  CONCAT\000\
  FIRST\000\
  SUB\000\
  BOOL\000\
  NAT\000\
  TUPLE\000\
  STRING\000\
  CHAR\000\
  FIX\000\
  LPAREN\000\
  RPAREN\000\
  LCURLY\000\
  RCURLY\000\
  COMMA\000\
  DOT\000\
  EQ\000\
  COLON\000\
  ARROW\000\
  EOF\000\
  "

let yynames_block = "\
  INTV\000\
  IDV\000\
  STRINGV\000\
  CHARV\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 50 "parser.mly"
      ( Bind (_1, _3) )
# 331 "parser.ml"
               : Lambda.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 52 "parser.mly"
      ( Eval _1 )
# 338 "parser.ml"
               : Lambda.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'appTerm) in
    Obj.repr(
# 56 "parser.mly"
      ( _1 )
# 345 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 58 "parser.mly"
      ( TmIf (_2, _4, _6) )
# 354 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 60 "parser.mly"
      ( TmAbs (_2, _4, _6) )
# 363 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 62 "parser.mly"
      ( TmLetIn (_2, _4, _6) )
# 372 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'ty) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 64 "parser.mly"
      ( TmLetIn (_2, TmFix (TmAbs (_2, _4, _6)), _8) )
# 382 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 68 "parser.mly"
      ( _1 )
# 389 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 70 "parser.mly"
      ( TmSucc _2 )
# 396 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 72 "parser.mly"
      ( TmPred _2 )
# 403 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 74 "parser.mly"
      ( TmIsZero _2 )
# 410 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 76 "parser.mly"
      ( TmConcat (_2, _3) )
# 418 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 78 "parser.mly"
      ( TmFix _2 )
# 425 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 80 "parser.mly"
      ( TmFirst _2 )
# 432 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 82 "parser.mly"
      ( TmSub _2 )
# 439 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'appTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 84 "parser.mly"
      ( TmApp (_1, _2) )
# 447 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'pathTerm) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 88 "parser.mly"
    ( TmProj (_1, _4) )
# 455 "parser.ml"
               : 'pathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'pathTerm) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 90 "parser.mly"
    ( TmProj (_1, string_of_int _4) )
# 463 "parser.ml"
               : 'pathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 92 "parser.mly"
    ( _1 )
# 470 "parser.ml"
               : 'pathTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 96 "parser.mly"
      ( _2 )
# 477 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 98 "parser.mly"
      ( TmTrue )
# 483 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 100 "parser.mly"
      ( TmFalse )
# 489 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 102 "parser.mly"
      ( TmVar _1 )
# 496 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 104 "parser.mly"
      ( let rec f = function
            0 -> TmZero
          | n -> TmSucc (f (n-1))
        in f _1 )
# 506 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 109 "parser.mly"
      ( TmString _1 )
# 513 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 111 "parser.mly"
      ( TmChar _1)
# 520 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tupleFields) in
    Obj.repr(
# 113 "parser.mly"
      ( TmTuple _2)
# 527 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 117 "parser.mly"
    ([_1])
# 534 "parser.ml"
               : 'tupleFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tupleFields) in
    Obj.repr(
# 119 "parser.mly"
    (_1 :: _3)
# 542 "parser.ml"
               : 'tupleFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTy) in
    Obj.repr(
# 123 "parser.mly"
      ( _1 )
# 549 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atomicTy) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 125 "parser.mly"
      ( TyArr (_1, _3) )
# 557 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 129 "parser.mly"
      ( _2 )
# 564 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 131 "parser.mly"
      ( TyBool )
# 570 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 133 "parser.mly"
      ( TyNat )
# 576 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 135 "parser.mly"
      ( TyString )
# 582 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 137 "parser.mly"
      ( TyChar )
# 588 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'tupleTypes) in
    Obj.repr(
# 139 "parser.mly"
      ( TyTuple (_3))
# 595 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 143 "parser.mly"
    ([_1])
# 602 "parser.ml"
               : 'tupleTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tupleTypes) in
    Obj.repr(
# 145 "parser.mly"
    (_1 :: _3)
# 610 "parser.ml"
               : 'tupleTypes))
(* Entry s *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let s (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Lambda.command)
