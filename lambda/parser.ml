type token =
  | LAMBDA
  | TRUE
  | FALSE
  | IF
  | THEN
  | ELSE
  | SUCC
  | PRED
  | ISZERO
  | LET
  | LETREC
  | IN
  | CONCAT
  | FIRST
  | SUB
  | BOOL
  | NAT
  | TUPLE
  | RECORD
  | STRING
  | CHAR
  | FIX
  | LPAREN
  | RPAREN
  | LSQUARE
  | RSQUARE
  | LCURLY
  | RCURLY
  | COMMA
  | DOT
  | EQ
  | COLON
  | ARROW
  | EOF
  | INTV of (int)
  | IDV of (string)
  | STRINGV of (string)
  | CHARV of (char)

open Parsing;;
let _ = parse_error;;
# 3 "parser.mly"
  open Lambda;;
# 46 "parser.ml"
let yytransl_const = [|
  257 (* LAMBDA *);
  258 (* TRUE *);
  259 (* FALSE *);
  260 (* IF *);
  261 (* THEN *);
  262 (* ELSE *);
  263 (* SUCC *);
  264 (* PRED *);
  265 (* ISZERO *);
  266 (* LET *);
  267 (* LETREC *);
  268 (* IN *);
  269 (* CONCAT *);
  270 (* FIRST *);
  271 (* SUB *);
  272 (* BOOL *);
  273 (* NAT *);
  274 (* TUPLE *);
  275 (* RECORD *);
  276 (* STRING *);
  277 (* CHAR *);
  278 (* FIX *);
  279 (* LPAREN *);
  280 (* RPAREN *);
  281 (* LSQUARE *);
  282 (* RSQUARE *);
  283 (* LCURLY *);
  284 (* RCURLY *);
  285 (* COMMA *);
  286 (* DOT *);
  287 (* EQ *);
  288 (* COLON *);
  289 (* ARROW *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  290 (* INTV *);
  291 (* IDV *);
  292 (* STRINGV *);
  293 (* CHARV *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\002\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\005\000\005\000\005\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\007\000\007\000\008\000\008\000\
\004\000\004\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\010\000\010\000\011\000\011\000\000\000"

let yylen = "\002\000\
\004\000\002\000\001\000\006\000\006\000\006\000\008\000\001\000\
\002\000\002\000\002\000\003\000\002\000\002\000\002\000\002\000\
\004\000\004\000\001\000\003\000\001\000\001\000\001\000\001\000\
\001\000\001\000\003\000\003\000\001\000\003\000\003\000\005\000\
\001\000\003\000\003\000\001\000\001\000\001\000\001\000\004\000\
\004\000\001\000\003\000\003\000\005\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\021\000\022\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\024\000\000\000\025\000\026\000\046\000\000\000\000\000\
\000\000\019\000\000\000\023\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\020\000\000\000\000\000\027\000\
\028\000\000\000\000\000\036\000\037\000\000\000\000\000\038\000\
\039\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\030\000\001\000\018\000\017\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\035\000\005\000\034\000\004\000\006\000\000\000\000\000\
\032\000\000\000\040\000\000\000\041\000\000\000\043\000\000\000\
\007\000\000\000\045\000"

let yydgoto = "\002\000\
\022\000\041\000\024\000\086\000\025\000\026\000\042\000\043\000\
\068\000\087\000\089\000"

let yysindex = "\007\000\
\053\255\000\000\231\254\000\000\000\000\103\255\170\255\170\255\
\170\255\237\254\238\254\170\255\170\255\170\255\170\255\103\255\
\140\255\000\000\244\254\000\000\000\000\000\000\020\000\170\255\
\247\254\000\000\246\254\000\000\018\255\247\254\247\254\247\254\
\000\255\001\255\097\255\247\254\247\254\247\254\010\255\004\255\
\007\255\012\255\013\255\103\255\000\000\247\254\008\255\009\255\
\103\255\103\255\009\255\247\254\000\000\103\255\103\255\000\000\
\000\000\042\000\224\254\000\000\000\000\017\255\019\255\000\000\
\000\000\009\255\015\255\014\255\044\255\039\255\021\255\030\255\
\000\000\000\000\000\000\000\000\009\255\034\255\041\255\103\255\
\009\255\103\255\103\255\103\255\035\255\042\255\046\255\047\255\
\049\255\000\000\000\000\000\000\000\000\000\000\060\255\004\255\
\000\000\009\255\000\000\009\255\000\000\103\255\000\000\055\255\
\000\000\034\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\018\000\000\000\000\000\000\000\000\000\003\000\
\001\000\000\000\000\000\000\000\000\000\037\000\073\000\109\000\
\000\000\000\000\000\000\145\000\181\000\217\000\000\000\155\255\
\057\255\000\000\000\000\000\000\000\000\253\000\000\000\000\000\
\000\000\000\000\000\000\033\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\239\254\000\000\000\000\000\000\058\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\063\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\064\255\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\255\255\000\000\214\255\187\000\000\000\038\000\009\000\
\000\000\253\255\246\255"

let yytablesize = 582
let yytable = "\023\000\
\008\000\075\000\003\000\076\000\029\000\067\000\033\000\001\000\
\071\000\027\000\033\000\033\000\033\000\033\000\039\000\033\000\
\034\000\023\000\044\000\045\000\047\000\048\000\049\000\079\000\
\060\000\061\000\062\000\063\000\064\000\065\000\050\000\066\000\
\051\000\053\000\054\000\055\000\009\000\059\000\092\000\056\000\
\057\000\074\000\058\000\077\000\080\000\078\000\081\000\069\000\
\070\000\082\000\083\000\084\000\072\000\003\000\004\000\005\000\
\006\000\104\000\085\000\007\000\008\000\009\000\010\000\011\000\
\090\000\012\000\013\000\014\000\088\000\096\000\098\000\102\000\
\010\000\099\000\015\000\016\000\101\000\100\000\091\000\017\000\
\093\000\094\000\095\000\106\000\029\000\031\000\018\000\019\000\
\020\000\021\000\042\000\044\000\073\000\097\000\103\000\107\000\
\000\000\000\000\004\000\005\000\105\000\000\000\000\000\003\000\
\004\000\005\000\006\000\000\000\011\000\007\000\008\000\009\000\
\010\000\011\000\000\000\012\000\013\000\014\000\000\000\016\000\
\000\000\000\000\000\000\017\000\015\000\016\000\047\000\000\000\
\000\000\017\000\018\000\028\000\020\000\021\000\000\000\000\000\
\018\000\028\000\020\000\021\000\003\000\004\000\005\000\006\000\
\014\000\000\000\007\000\008\000\009\000\010\000\011\000\000\000\
\012\000\013\000\014\000\000\000\023\000\023\000\000\000\000\000\
\000\000\015\000\016\000\000\000\000\000\000\000\017\000\000\000\
\000\000\000\000\000\000\004\000\005\000\018\000\040\000\020\000\
\021\000\023\000\000\000\000\000\015\000\023\000\023\000\023\000\
\023\000\000\000\000\000\000\000\023\000\023\000\023\000\023\000\
\016\000\030\000\031\000\032\000\017\000\000\000\035\000\036\000\
\037\000\038\000\000\000\018\000\028\000\020\000\021\000\000\000\
\000\000\000\000\046\000\000\000\000\000\000\000\000\000\000\000\
\013\000\000\000\000\000\000\000\000\000\052\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\
\000\000\000\000\008\000\008\000\000\000\008\000\008\000\003\000\
\003\000\000\000\000\000\000\000\008\000\000\000\003\000\000\000\
\000\000\000\000\000\000\023\000\023\000\000\000\000\000\008\000\
\008\000\000\000\003\000\008\000\008\000\008\000\003\000\003\000\
\012\000\000\000\008\000\008\000\008\000\008\000\009\000\009\000\
\023\000\009\000\009\000\000\000\023\000\000\000\000\000\023\000\
\009\000\000\000\000\000\023\000\023\000\023\000\023\000\000\000\
\000\000\000\000\000\000\009\000\009\000\000\000\000\000\009\000\
\009\000\009\000\000\000\000\000\000\000\000\000\009\000\009\000\
\009\000\009\000\010\000\010\000\000\000\010\000\010\000\000\000\
\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\
\010\000\000\000\000\000\010\000\010\000\010\000\000\000\000\000\
\000\000\000\000\010\000\010\000\010\000\010\000\011\000\011\000\
\000\000\011\000\011\000\000\000\000\000\000\000\000\000\000\000\
\011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\011\000\011\000\000\000\000\000\011\000\
\011\000\011\000\000\000\000\000\000\000\000\000\011\000\011\000\
\011\000\011\000\014\000\014\000\000\000\014\000\014\000\000\000\
\000\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\
\014\000\000\000\000\000\014\000\014\000\014\000\000\000\000\000\
\000\000\000\000\014\000\014\000\014\000\014\000\015\000\015\000\
\000\000\015\000\015\000\000\000\000\000\000\000\000\000\000\000\
\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\015\000\015\000\000\000\000\000\015\000\
\015\000\015\000\000\000\000\000\000\000\000\000\015\000\015\000\
\015\000\015\000\013\000\013\000\000\000\013\000\013\000\000\000\
\000\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\013\000\
\013\000\000\000\000\000\013\000\013\000\013\000\000\000\000\000\
\000\000\000\000\013\000\013\000\013\000\013\000\016\000\016\000\
\000\000\016\000\016\000\000\000\000\000\000\000\000\000\000\000\
\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\016\000\016\000\000\000\000\000\016\000\
\016\000\016\000\000\000\000\000\000\000\000\000\016\000\016\000\
\016\000\016\000\012\000\012\000\000\000\012\000\012\000\000\000\
\000\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\
\012\000\000\000\000\000\012\000\012\000\012\000\000\000\000\000\
\000\000\000\000\012\000\012\000\012\000\012\000"

let yycheck = "\001\000\
\000\000\034\001\000\000\036\001\006\000\048\000\024\001\001\000\
\051\000\035\001\028\001\029\001\030\001\031\001\016\000\035\001\
\035\001\000\000\031\001\000\000\030\001\032\001\005\001\066\000\
\016\001\017\001\018\001\019\001\020\001\021\001\031\001\023\001\
\032\001\024\001\031\001\029\001\000\000\030\001\081\000\028\001\
\028\001\000\000\044\000\027\001\030\001\027\001\033\001\049\000\
\050\000\006\001\012\001\031\001\054\000\001\001\002\001\003\001\
\004\001\100\000\029\001\007\001\008\001\009\001\010\001\011\001\
\024\001\013\001\014\001\015\001\035\001\035\001\029\001\012\001\
\000\000\028\001\022\001\023\001\028\001\031\001\080\000\027\001\
\082\000\083\000\084\000\029\001\028\001\028\001\034\001\035\001\
\036\001\037\001\028\001\028\001\055\000\085\000\098\000\106\000\
\255\255\255\255\002\001\003\001\102\000\255\255\255\255\001\001\
\002\001\003\001\004\001\255\255\000\000\007\001\008\001\009\001\
\010\001\011\001\255\255\013\001\014\001\015\001\255\255\023\001\
\255\255\255\255\255\255\027\001\022\001\023\001\030\001\255\255\
\255\255\027\001\034\001\035\001\036\001\037\001\255\255\255\255\
\034\001\035\001\036\001\037\001\001\001\002\001\003\001\004\001\
\000\000\255\255\007\001\008\001\009\001\010\001\011\001\255\255\
\013\001\014\001\015\001\255\255\002\001\003\001\255\255\255\255\
\255\255\022\001\023\001\255\255\255\255\255\255\027\001\255\255\
\255\255\255\255\255\255\002\001\003\001\034\001\035\001\036\001\
\037\001\023\001\255\255\255\255\000\000\027\001\028\001\029\001\
\030\001\255\255\255\255\255\255\034\001\035\001\036\001\037\001\
\023\001\007\000\008\000\009\000\027\001\255\255\012\000\013\000\
\014\000\015\000\255\255\034\001\035\001\036\001\037\001\255\255\
\255\255\255\255\024\000\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\035\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\255\255\005\001\006\001\005\001\
\006\001\255\255\255\255\255\255\012\001\255\255\012\001\255\255\
\255\255\255\255\255\255\002\001\003\001\255\255\255\255\023\001\
\024\001\255\255\024\001\027\001\028\001\029\001\028\001\029\001\
\000\000\255\255\034\001\035\001\036\001\037\001\002\001\003\001\
\023\001\005\001\006\001\255\255\027\001\255\255\255\255\030\001\
\012\001\255\255\255\255\034\001\035\001\036\001\037\001\255\255\
\255\255\255\255\255\255\023\001\024\001\255\255\255\255\027\001\
\028\001\029\001\255\255\255\255\255\255\255\255\034\001\035\001\
\036\001\037\001\002\001\003\001\255\255\005\001\006\001\255\255\
\255\255\255\255\255\255\255\255\012\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\023\001\
\024\001\255\255\255\255\027\001\028\001\029\001\255\255\255\255\
\255\255\255\255\034\001\035\001\036\001\037\001\002\001\003\001\
\255\255\005\001\006\001\255\255\255\255\255\255\255\255\255\255\
\012\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\023\001\024\001\255\255\255\255\027\001\
\028\001\029\001\255\255\255\255\255\255\255\255\034\001\035\001\
\036\001\037\001\002\001\003\001\255\255\005\001\006\001\255\255\
\255\255\255\255\255\255\255\255\012\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\023\001\
\024\001\255\255\255\255\027\001\028\001\029\001\255\255\255\255\
\255\255\255\255\034\001\035\001\036\001\037\001\002\001\003\001\
\255\255\005\001\006\001\255\255\255\255\255\255\255\255\255\255\
\012\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\023\001\024\001\255\255\255\255\027\001\
\028\001\029\001\255\255\255\255\255\255\255\255\034\001\035\001\
\036\001\037\001\002\001\003\001\255\255\005\001\006\001\255\255\
\255\255\255\255\255\255\255\255\012\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\023\001\
\024\001\255\255\255\255\027\001\028\001\029\001\255\255\255\255\
\255\255\255\255\034\001\035\001\036\001\037\001\002\001\003\001\
\255\255\005\001\006\001\255\255\255\255\255\255\255\255\255\255\
\012\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\023\001\024\001\255\255\255\255\027\001\
\028\001\029\001\255\255\255\255\255\255\255\255\034\001\035\001\
\036\001\037\001\002\001\003\001\255\255\005\001\006\001\255\255\
\255\255\255\255\255\255\255\255\012\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\023\001\
\024\001\255\255\255\255\027\001\028\001\029\001\255\255\255\255\
\255\255\255\255\034\001\035\001\036\001\037\001"

let yynames_const = "\
  LAMBDA\000\
  TRUE\000\
  FALSE\000\
  IF\000\
  THEN\000\
  ELSE\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  LET\000\
  LETREC\000\
  IN\000\
  CONCAT\000\
  FIRST\000\
  SUB\000\
  BOOL\000\
  NAT\000\
  TUPLE\000\
  RECORD\000\
  STRING\000\
  CHAR\000\
  FIX\000\
  LPAREN\000\
  RPAREN\000\
  LSQUARE\000\
  RSQUARE\000\
  LCURLY\000\
  RCURLY\000\
  COMMA\000\
  DOT\000\
  EQ\000\
  COLON\000\
  ARROW\000\
  EOF\000\
  "

let yynames_block = "\
  INTV\000\
  IDV\000\
  STRINGV\000\
  CHARV\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 53 "parser.mly"
      ( Bind (_1, _3) )
# 366 "parser.ml"
               : Lambda.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 55 "parser.mly"
      ( Eval _1 )
# 373 "parser.ml"
               : Lambda.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'appTerm) in
    Obj.repr(
# 59 "parser.mly"
      ( _1 )
# 380 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 61 "parser.mly"
      ( TmIf (_2, _4, _6) )
# 389 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 63 "parser.mly"
      ( TmAbs (_2, _4, _6) )
# 398 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 65 "parser.mly"
      ( TmLetIn (_2, _4, _6) )
# 407 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'ty) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 67 "parser.mly"
      ( TmLetIn (_2, TmFix (TmAbs (_2, _4, _6)), _8) )
# 417 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 71 "parser.mly"
      ( _1 )
# 424 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 73 "parser.mly"
      ( TmSucc _2 )
# 431 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 75 "parser.mly"
      ( TmPred _2 )
# 438 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 77 "parser.mly"
      ( TmIsZero _2 )
# 445 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 79 "parser.mly"
      ( TmConcat (_2, _3) )
# 453 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 81 "parser.mly"
      ( TmFix _2 )
# 460 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 83 "parser.mly"
      ( TmFirst _2 )
# 467 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 85 "parser.mly"
      ( TmSub _2 )
# 474 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'appTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 87 "parser.mly"
      ( TmApp (_1, _2) )
# 482 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'pathTerm) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 91 "parser.mly"
    ( TmProj (_1, _4) )
# 490 "parser.ml"
               : 'pathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'pathTerm) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 93 "parser.mly"
    ( TmProj (_1, string_of_int _4) )
# 498 "parser.ml"
               : 'pathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 95 "parser.mly"
    ( _1 )
# 505 "parser.ml"
               : 'pathTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 99 "parser.mly"
      ( _2 )
# 512 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 101 "parser.mly"
      ( TmTrue )
# 518 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 103 "parser.mly"
      ( TmFalse )
# 524 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 105 "parser.mly"
      ( TmVar _1 )
# 531 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 107 "parser.mly"
      ( let rec f = function
            0 -> TmZero
          | n -> TmSucc (f (n-1))
        in f _1 )
# 541 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 112 "parser.mly"
      ( TmString _1 )
# 548 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 114 "parser.mly"
      ( TmChar _1)
# 555 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tupleFields) in
    Obj.repr(
# 116 "parser.mly"
      ( TmTuple _2)
# 562 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'recordFields) in
    Obj.repr(
# 118 "parser.mly"
      ( TmRecord _2)
# 569 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 122 "parser.mly"
    ([_1])
# 576 "parser.ml"
               : 'tupleFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tupleFields) in
    Obj.repr(
# 124 "parser.mly"
    (_1 :: _3)
# 584 "parser.ml"
               : 'tupleFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 128 "parser.mly"
    ( [(_1, _3)] )
# 592 "parser.ml"
               : 'recordFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'recordFields) in
    Obj.repr(
# 130 "parser.mly"
    ( (_1, _3) :: _5 )
# 601 "parser.ml"
               : 'recordFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTy) in
    Obj.repr(
# 134 "parser.mly"
      ( _1 )
# 608 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atomicTy) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 136 "parser.mly"
      ( TyArr (_1, _3) )
# 616 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 140 "parser.mly"
      ( _2 )
# 623 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 142 "parser.mly"
      ( TyBool )
# 629 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 144 "parser.mly"
      ( TyNat )
# 635 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 146 "parser.mly"
      ( TyString )
# 641 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 148 "parser.mly"
      ( TyChar )
# 647 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'tupleTypes) in
    Obj.repr(
# 150 "parser.mly"
      ( TyTuple (_3))
# 654 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'recordTypes) in
    Obj.repr(
# 152 "parser.mly"
      ( TyRecord (_3))
# 661 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 156 "parser.mly"
    ([_1])
# 668 "parser.ml"
               : 'tupleTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tupleTypes) in
    Obj.repr(
# 158 "parser.mly"
    (_1 :: _3)
# 676 "parser.ml"
               : 'tupleTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 162 "parser.mly"
    ([(_1, _3)])
# 684 "parser.ml"
               : 'recordTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'recordTypes) in
    Obj.repr(
# 164 "parser.mly"
    ((_1, _3) :: _5)
# 693 "parser.ml"
               : 'recordTypes))
(* Entry s *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let s (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Lambda.command)
