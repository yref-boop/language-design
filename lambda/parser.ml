type token =
  | LAMBDA
  | TRUE
  | FALSE
  | IF
  | THEN
  | ELSE
  | SUCC
  | PRED
  | ISZERO
  | LET
  | LETREC
  | IN
  | CONCAT
  | FIRST
  | SUB
  | BOOL
  | NAT
  | TUPLE
  | RECORD
  | LIST
  | STRING
  | CHAR
  | FIX
  | LPAREN
  | RPAREN
  | LSQUARE
  | RSQUARE
  | LCURLY
  | RCURLY
  | COMMA
  | DOT
  | EQ
  | COLON
  | ARROW
  | EOF
  | NULL
  | LISTV
  | ISEMPTY
  | HEAD
  | TAIL
  | INTV of (int)
  | IDV of (string)
  | STRINGV of (string)
  | CHARV of (char)

open Parsing;;
let _ = parse_error;;
# 3 "parser.mly"
  open Lambda;;
# 52 "parser.ml"
let yytransl_const = [|
  257 (* LAMBDA *);
  258 (* TRUE *);
  259 (* FALSE *);
  260 (* IF *);
  261 (* THEN *);
  262 (* ELSE *);
  263 (* SUCC *);
  264 (* PRED *);
  265 (* ISZERO *);
  266 (* LET *);
  267 (* LETREC *);
  268 (* IN *);
  269 (* CONCAT *);
  270 (* FIRST *);
  271 (* SUB *);
  272 (* BOOL *);
  273 (* NAT *);
  274 (* TUPLE *);
  275 (* RECORD *);
  276 (* LIST *);
  277 (* STRING *);
  278 (* CHAR *);
  279 (* FIX *);
  280 (* LPAREN *);
  281 (* RPAREN *);
  282 (* LSQUARE *);
  283 (* RSQUARE *);
  284 (* LCURLY *);
  285 (* RCURLY *);
  286 (* COMMA *);
  287 (* DOT *);
  288 (* EQ *);
  289 (* COLON *);
  290 (* ARROW *);
    0 (* EOF *);
  291 (* NULL *);
  292 (* LISTV *);
  293 (* ISEMPTY *);
  294 (* HEAD *);
  295 (* TAIL *);
    0|]

let yytransl_block = [|
  296 (* INTV *);
  297 (* IDV *);
  298 (* STRINGV *);
  299 (* CHARV *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\002\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\005\000\005\000\005\000\
\005\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\007\000\007\000\008\000\008\000\004\000\004\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\010\000\010\000\011\000\011\000\000\000"

let yylen = "\002\000\
\004\000\002\000\001\000\006\000\006\000\006\000\008\000\001\000\
\002\000\002\000\002\000\003\000\002\000\002\000\002\000\002\000\
\006\000\005\000\005\000\005\000\004\000\003\000\003\000\003\000\
\001\000\003\000\001\000\001\000\001\000\001\000\001\000\001\000\
\003\000\003\000\001\000\003\000\003\000\005\000\001\000\003\000\
\003\000\001\000\001\000\001\000\001\000\004\000\004\000\004\000\
\001\000\003\000\003\000\005\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\027\000\028\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\030\000\000\000\
\031\000\032\000\053\000\000\000\000\000\000\000\025\000\000\000\
\029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\026\000\000\000\
\000\000\033\000\034\000\042\000\043\000\000\000\000\000\000\000\
\044\000\045\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\024\000\022\000\023\000\000\000\000\000\000\000\
\000\000\000\000\036\000\000\000\000\000\000\000\000\000\021\000\
\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\041\000\040\000\000\000\000\000\000\000\000\000\005\000\004\000\
\006\000\000\000\000\000\038\000\000\000\046\000\000\000\047\000\
\048\000\000\000\000\000\050\000\000\000\007\000\000\000\052\000"

let yydgoto = "\002\000\
\027\000\046\000\029\000\108\000\030\000\031\000\047\000\048\000\
\077\000\109\000\111\000"

let yysindex = "\255\255\
\133\255\000\000\217\254\000\000\000\000\176\255\086\255\086\255\
\086\255\219\254\231\254\086\255\086\255\086\255\086\255\176\255\
\133\001\247\254\002\255\003\255\004\255\006\255\000\000\001\255\
\000\000\000\000\000\000\035\000\086\255\008\255\000\000\011\255\
\000\000\032\255\008\255\008\255\008\255\013\255\016\255\044\255\
\008\255\008\255\008\255\025\255\026\255\027\255\031\255\034\255\
\099\255\099\255\099\255\099\255\099\255\176\255\000\000\008\255\
\235\254\099\255\176\255\176\255\099\255\008\255\000\000\176\255\
\176\255\000\000\000\000\000\000\000\000\036\255\037\255\043\255\
\000\000\000\000\099\255\046\255\048\255\050\255\056\255\063\255\
\064\255\071\000\000\000\000\000\000\000\061\255\087\255\082\255\
\070\255\065\255\000\000\099\255\062\255\099\255\079\255\000\000\
\099\255\086\255\086\255\086\255\086\255\000\000\176\255\176\255\
\176\255\176\255\071\255\081\255\093\255\092\255\096\255\103\255\
\000\000\000\000\044\255\008\255\008\255\008\255\000\000\000\000\
\000\000\119\255\026\255\000\000\099\255\000\000\099\255\000\000\
\000\000\008\255\176\255\000\000\102\255\000\000\062\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\090\001\
\000\000\000\000\000\000\000\000\253\000\001\000\000\000\000\000\
\000\000\000\000\009\000\051\000\059\000\000\000\000\000\000\000\
\101\000\109\000\151\000\000\000\012\255\109\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\159\000\
\000\000\000\000\000\000\000\000\000\000\201\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\049\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\110\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\116\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\209\000\251\000\027\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\059\001\000\000\000\000\120\255\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\002\000\000\000\229\255\254\255\000\000\085\000\045\000\
\000\000\028\000\019\000"

let yytablesize = 688
let yytable = "\001\000\
\008\000\032\000\028\000\038\000\035\000\036\000\037\000\034\000\
\009\000\040\000\041\000\042\000\043\000\029\000\029\000\039\000\
\049\000\044\000\083\000\084\000\085\000\076\000\078\000\079\000\
\080\000\081\000\056\000\050\000\051\000\052\000\086\000\053\000\
\054\000\089\000\055\000\029\000\059\000\062\000\057\000\029\000\
\029\000\029\000\029\000\058\000\060\000\004\000\005\000\095\000\
\061\000\063\000\010\000\029\000\029\000\029\000\029\000\082\000\
\065\000\064\000\011\000\066\000\087\000\088\000\067\000\092\000\
\093\000\090\000\112\000\016\000\094\000\114\000\102\000\017\000\
\096\000\039\000\057\000\039\000\098\000\039\000\039\000\039\000\
\039\000\097\000\099\000\023\000\033\000\025\000\026\000\004\000\
\005\000\100\000\101\000\103\000\104\000\105\000\107\000\115\000\
\116\000\117\000\118\000\133\000\014\000\106\000\110\000\113\000\
\119\000\120\000\121\000\122\000\015\000\016\000\125\000\123\000\
\130\000\017\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\126\000\075\000\127\000\128\000\023\000\033\000\025\000\
\026\000\129\000\131\000\135\000\134\000\003\000\004\000\005\000\
\006\000\035\000\037\000\007\000\008\000\009\000\010\000\011\000\
\049\000\012\000\013\000\014\000\051\000\091\000\013\000\124\000\
\132\000\136\000\000\000\015\000\016\000\000\000\016\000\000\000\
\017\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\
\019\000\020\000\021\000\022\000\023\000\024\000\025\000\026\000\
\003\000\004\000\005\000\006\000\000\000\000\000\007\000\008\000\
\009\000\010\000\011\000\000\000\012\000\013\000\014\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\015\000\016\000\
\012\000\000\000\000\000\017\000\000\000\000\000\000\000\000\000\
\018\000\000\000\018\000\019\000\020\000\021\000\022\000\023\000\
\033\000\025\000\026\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\019\000\000\000\003\000\000\000\000\000\000\000\
\000\000\000\000\008\000\008\000\000\000\008\000\008\000\000\000\
\000\000\000\000\009\000\009\000\008\000\009\000\009\000\000\000\
\000\000\000\000\000\000\000\000\009\000\000\000\000\000\000\000\
\008\000\008\000\020\000\000\000\008\000\008\000\008\000\000\000\
\009\000\009\000\000\000\000\000\009\000\009\000\009\000\000\000\
\008\000\008\000\008\000\008\000\000\000\000\000\000\000\000\000\
\009\000\009\000\009\000\009\000\010\000\010\000\000\000\010\000\
\010\000\000\000\017\000\000\000\011\000\011\000\010\000\011\000\
\011\000\000\000\000\000\000\000\000\000\000\000\011\000\000\000\
\000\000\000\000\010\000\010\000\000\000\000\000\010\000\010\000\
\010\000\000\000\011\000\011\000\000\000\000\000\011\000\011\000\
\011\000\029\000\010\000\010\000\010\000\010\000\000\000\000\000\
\000\000\000\000\011\000\011\000\011\000\011\000\014\000\014\000\
\000\000\014\000\014\000\000\000\000\000\000\000\015\000\015\000\
\014\000\015\000\015\000\000\000\000\000\000\000\000\000\000\000\
\015\000\000\000\000\000\000\000\014\000\014\000\000\000\000\000\
\014\000\014\000\014\000\000\000\015\000\015\000\000\000\000\000\
\015\000\015\000\015\000\000\000\014\000\014\000\014\000\014\000\
\000\000\000\000\000\000\000\000\015\000\015\000\015\000\015\000\
\013\000\013\000\000\000\013\000\013\000\000\000\000\000\000\000\
\016\000\016\000\013\000\016\000\016\000\000\000\000\000\000\000\
\000\000\000\000\016\000\000\000\000\000\000\000\013\000\013\000\
\000\000\000\000\013\000\013\000\013\000\000\000\016\000\016\000\
\000\000\000\000\016\000\016\000\016\000\000\000\013\000\013\000\
\013\000\013\000\000\000\000\000\000\000\000\000\016\000\016\000\
\016\000\016\000\012\000\012\000\000\000\012\000\012\000\000\000\
\000\000\000\000\018\000\018\000\012\000\018\000\018\000\000\000\
\000\000\000\000\000\000\000\000\018\000\000\000\000\000\000\000\
\012\000\012\000\000\000\000\000\012\000\012\000\012\000\000\000\
\018\000\018\000\000\000\000\000\018\000\018\000\018\000\000\000\
\012\000\012\000\012\000\012\000\000\000\000\000\000\000\000\000\
\018\000\018\000\018\000\018\000\019\000\019\000\000\000\019\000\
\019\000\003\000\003\000\000\000\000\000\000\000\019\000\000\000\
\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\019\000\019\000\000\000\003\000\019\000\019\000\
\019\000\003\000\003\000\000\000\020\000\020\000\000\000\020\000\
\020\000\000\000\019\000\019\000\019\000\019\000\020\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\020\000\020\000\000\000\000\000\020\000\020\000\
\020\000\000\000\000\000\000\000\017\000\017\000\000\000\017\000\
\017\000\000\000\020\000\020\000\020\000\020\000\017\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\017\000\017\000\000\000\000\000\017\000\017\000\
\017\000\000\000\000\000\029\000\029\000\000\000\000\000\000\000\
\000\000\000\000\017\000\017\000\017\000\017\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\029\000\000\000\000\000\000\000\029\000\000\000\000\000\
\029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\029\000\029\000\029\000\029\000\003\000\004\000\005\000\
\006\000\000\000\000\000\007\000\008\000\009\000\010\000\011\000\
\000\000\012\000\013\000\014\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\015\000\016\000\000\000\000\000\000\000\
\017\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\
\019\000\020\000\021\000\022\000\023\000\045\000\025\000\026\000"

let yycheck = "\001\000\
\000\000\041\001\001\000\041\001\007\000\008\000\009\000\006\000\
\000\000\012\000\013\000\014\000\015\000\002\001\003\001\041\001\
\026\001\016\000\040\001\041\001\042\001\049\000\050\000\051\000\
\052\000\053\000\029\000\026\001\026\001\026\001\058\000\026\001\
\032\001\061\000\000\000\024\001\005\001\040\000\031\001\028\001\
\029\001\030\001\031\001\033\001\032\001\002\001\003\001\075\000\
\033\001\025\001\000\000\040\001\041\001\042\001\043\001\054\000\
\030\001\032\001\000\000\029\001\059\000\060\000\029\001\028\001\
\028\001\064\000\094\000\024\001\026\001\097\000\000\000\028\001\
\027\001\025\001\031\001\027\001\027\001\029\001\030\001\031\001\
\032\001\034\001\027\001\040\001\041\001\042\001\043\001\002\001\
\003\001\027\001\027\001\031\001\006\001\012\001\030\001\098\000\
\099\000\100\000\101\000\127\000\000\000\032\001\041\001\025\001\
\103\000\104\000\105\000\106\000\000\000\024\001\030\001\041\001\
\115\000\028\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\029\001\024\001\032\001\029\001\040\001\041\001\042\001\
\043\001\027\001\012\001\030\001\131\000\001\001\002\001\003\001\
\004\001\029\001\029\001\007\001\008\001\009\001\010\001\011\001\
\029\001\013\001\014\001\015\001\029\001\065\000\000\000\107\000\
\125\000\135\000\255\255\023\001\024\001\255\255\000\000\255\255\
\028\001\255\255\255\255\255\255\255\255\255\255\255\255\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\001\001\002\001\003\001\004\001\255\255\255\255\007\001\008\001\
\009\001\010\001\011\001\255\255\013\001\014\001\015\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\023\001\024\001\
\000\000\255\255\255\255\028\001\255\255\255\255\255\255\255\255\
\000\000\255\255\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\255\255\005\001\006\001\255\255\
\255\255\255\255\002\001\003\001\012\001\005\001\006\001\255\255\
\255\255\255\255\255\255\255\255\012\001\255\255\255\255\255\255\
\024\001\025\001\000\000\255\255\028\001\029\001\030\001\255\255\
\024\001\025\001\255\255\255\255\028\001\029\001\030\001\255\255\
\040\001\041\001\042\001\043\001\255\255\255\255\255\255\255\255\
\040\001\041\001\042\001\043\001\002\001\003\001\255\255\005\001\
\006\001\255\255\000\000\255\255\002\001\003\001\012\001\005\001\
\006\001\255\255\255\255\255\255\255\255\255\255\012\001\255\255\
\255\255\255\255\024\001\025\001\255\255\255\255\028\001\029\001\
\030\001\255\255\024\001\025\001\255\255\255\255\028\001\029\001\
\030\001\000\000\040\001\041\001\042\001\043\001\255\255\255\255\
\255\255\255\255\040\001\041\001\042\001\043\001\002\001\003\001\
\255\255\005\001\006\001\255\255\255\255\255\255\002\001\003\001\
\012\001\005\001\006\001\255\255\255\255\255\255\255\255\255\255\
\012\001\255\255\255\255\255\255\024\001\025\001\255\255\255\255\
\028\001\029\001\030\001\255\255\024\001\025\001\255\255\255\255\
\028\001\029\001\030\001\255\255\040\001\041\001\042\001\043\001\
\255\255\255\255\255\255\255\255\040\001\041\001\042\001\043\001\
\002\001\003\001\255\255\005\001\006\001\255\255\255\255\255\255\
\002\001\003\001\012\001\005\001\006\001\255\255\255\255\255\255\
\255\255\255\255\012\001\255\255\255\255\255\255\024\001\025\001\
\255\255\255\255\028\001\029\001\030\001\255\255\024\001\025\001\
\255\255\255\255\028\001\029\001\030\001\255\255\040\001\041\001\
\042\001\043\001\255\255\255\255\255\255\255\255\040\001\041\001\
\042\001\043\001\002\001\003\001\255\255\005\001\006\001\255\255\
\255\255\255\255\002\001\003\001\012\001\005\001\006\001\255\255\
\255\255\255\255\255\255\255\255\012\001\255\255\255\255\255\255\
\024\001\025\001\255\255\255\255\028\001\029\001\030\001\255\255\
\024\001\025\001\255\255\255\255\028\001\029\001\030\001\255\255\
\040\001\041\001\042\001\043\001\255\255\255\255\255\255\255\255\
\040\001\041\001\042\001\043\001\002\001\003\001\255\255\005\001\
\006\001\005\001\006\001\255\255\255\255\255\255\012\001\255\255\
\012\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\024\001\025\001\255\255\025\001\028\001\029\001\
\030\001\029\001\030\001\255\255\002\001\003\001\255\255\005\001\
\006\001\255\255\040\001\041\001\042\001\043\001\012\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\024\001\025\001\255\255\255\255\028\001\029\001\
\030\001\255\255\255\255\255\255\002\001\003\001\255\255\005\001\
\006\001\255\255\040\001\041\001\042\001\043\001\012\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\024\001\025\001\255\255\255\255\028\001\029\001\
\030\001\255\255\255\255\002\001\003\001\255\255\255\255\255\255\
\255\255\255\255\040\001\041\001\042\001\043\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\024\001\255\255\255\255\255\255\028\001\255\255\255\255\
\031\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\040\001\041\001\042\001\043\001\001\001\002\001\003\001\
\004\001\255\255\255\255\007\001\008\001\009\001\010\001\011\001\
\255\255\013\001\014\001\015\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\023\001\024\001\255\255\255\255\255\255\
\028\001\255\255\255\255\255\255\255\255\255\255\255\255\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001"

let yynames_const = "\
  LAMBDA\000\
  TRUE\000\
  FALSE\000\
  IF\000\
  THEN\000\
  ELSE\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  LET\000\
  LETREC\000\
  IN\000\
  CONCAT\000\
  FIRST\000\
  SUB\000\
  BOOL\000\
  NAT\000\
  TUPLE\000\
  RECORD\000\
  LIST\000\
  STRING\000\
  CHAR\000\
  FIX\000\
  LPAREN\000\
  RPAREN\000\
  LSQUARE\000\
  RSQUARE\000\
  LCURLY\000\
  RCURLY\000\
  COMMA\000\
  DOT\000\
  EQ\000\
  COLON\000\
  ARROW\000\
  EOF\000\
  NULL\000\
  LISTV\000\
  ISEMPTY\000\
  HEAD\000\
  TAIL\000\
  "

let yynames_block = "\
  INTV\000\
  IDV\000\
  STRINGV\000\
  CHARV\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 60 "parser.mly"
      ( Bind (_1, _3) )
# 421 "parser.ml"
               : Lambda.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 62 "parser.mly"
      ( Eval _1 )
# 428 "parser.ml"
               : Lambda.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'appTerm) in
    Obj.repr(
# 66 "parser.mly"
      ( _1 )
# 435 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 68 "parser.mly"
      ( TmIf (_2, _4, _6) )
# 444 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 70 "parser.mly"
      ( TmAbs (_2, _4, _6) )
# 453 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 72 "parser.mly"
      ( TmLetIn (_2, _4, _6) )
# 462 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'ty) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 74 "parser.mly"
      ( TmLetIn (_2, TmFix (TmAbs (_2, _4, _6)), _8) )
# 472 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 78 "parser.mly"
      ( _1 )
# 479 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 80 "parser.mly"
      ( TmSucc _2 )
# 486 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 82 "parser.mly"
      ( TmPred _2 )
# 493 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 84 "parser.mly"
      ( TmIsZero _2 )
# 500 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 86 "parser.mly"
      ( TmConcat (_2, _3) )
# 508 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 88 "parser.mly"
      ( TmFix _2 )
# 515 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 90 "parser.mly"
      ( TmFirst _2 )
# 522 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 92 "parser.mly"
      ( TmSub _2 )
# 529 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'appTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 94 "parser.mly"
      ( TmApp (_1, _2) )
# 537 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'pathTerm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 96 "parser.mly"
     ( TmList (_3,_5,_6) )
# 546 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 98 "parser.mly"
     ( TmIsEmpty (_3,_5) )
# 554 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 100 "parser.mly"
     ( TmHead (_3,_5) )
# 562 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 102 "parser.mly"
     ( TmTail (_3,_5) )
# 570 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 104 "parser.mly"
     ( TmEmptyList (_3) )
# 577 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 108 "parser.mly"
    ( TmProj (_1, _3) )
# 585 "parser.ml"
               : 'pathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 110 "parser.mly"
    ( TmProj (_1, _3) )
# 593 "parser.ml"
               : 'pathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 112 "parser.mly"
    ( TmProj (_1, string_of_int _3) )
# 601 "parser.ml"
               : 'pathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 114 "parser.mly"
    ( _1 )
# 608 "parser.ml"
               : 'pathTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 118 "parser.mly"
      ( _2 )
# 615 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 120 "parser.mly"
      ( TmTrue )
# 621 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 122 "parser.mly"
      ( TmFalse )
# 627 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 124 "parser.mly"
      ( TmVar _1 )
# 634 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 126 "parser.mly"
      ( let rec f = function
            0 -> TmZero
          | n -> TmSucc (f (n-1))
        in f _1 )
# 644 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 131 "parser.mly"
      ( TmString _1 )
# 651 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 133 "parser.mly"
      ( TmChar _1 )
# 658 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tupleFields) in
    Obj.repr(
# 135 "parser.mly"
      ( TmTuple _2 )
# 665 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'recordFields) in
    Obj.repr(
# 137 "parser.mly"
      ( TmRecord _2 )
# 672 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 141 "parser.mly"
    ([_1])
# 679 "parser.ml"
               : 'tupleFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tupleFields) in
    Obj.repr(
# 143 "parser.mly"
    (_1 :: _3)
# 687 "parser.ml"
               : 'tupleFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 147 "parser.mly"
    ( [(_1, _3)] )
# 695 "parser.ml"
               : 'recordFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'recordFields) in
    Obj.repr(
# 149 "parser.mly"
    ( (_1, _3) :: _5 )
# 704 "parser.ml"
               : 'recordFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTy) in
    Obj.repr(
# 153 "parser.mly"
      ( _1 )
# 711 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atomicTy) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 155 "parser.mly"
      ( TyArr (_1, _3) )
# 719 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 159 "parser.mly"
      ( _2 )
# 726 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 161 "parser.mly"
      ( TyBool )
# 732 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 163 "parser.mly"
      ( TyNat )
# 738 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 165 "parser.mly"
      ( TyString )
# 744 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 167 "parser.mly"
      ( TyChar )
# 750 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'tupleTypes) in
    Obj.repr(
# 169 "parser.mly"
      ( TyTuple (_3) )
# 757 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'recordTypes) in
    Obj.repr(
# 171 "parser.mly"
      ( TyRecord (_3) )
# 764 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 173 "parser.mly"
      ( TyList (_3) )
# 771 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 177 "parser.mly"
    ([_1])
# 778 "parser.ml"
               : 'tupleTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tupleTypes) in
    Obj.repr(
# 179 "parser.mly"
    (_1 :: _3)
# 786 "parser.ml"
               : 'tupleTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 183 "parser.mly"
    ([(_1, _3)])
# 794 "parser.ml"
               : 'recordTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'recordTypes) in
    Obj.repr(
# 185 "parser.mly"
    ((_1, _3) :: _5)
# 803 "parser.ml"
               : 'recordTypes))
(* Entry s *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let s (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Lambda.command)
